const fs = require('fs');
const render = require('json-templater/string');
const path = require('path');
const endOfLine = require('os').EOL;
const injectPlugins = require("../src/plugin/inject/plugins.json");
const utils = require("./utils");

const OUTPUT_PATH = path.join(__dirname, '../src/entry/plugin-route.js');
const IMPORT_ROUTES_TEMPLATE = 'import {{name}} from \'{{src}}/routes.json\';';
const IMPORT_COMPONENT_TEMPLATE = 'import {{name}} from \'{{src}}\';';
const ROUTE_TEMPLATE = '  \'{{key}}\': [{{value}}]';
const COMPONENT_TEMPLATE = '  \'{{key}}\': {{value}}';
const STYLE_TEMPLATE = 'import \'{{src}}\';';
const PLUGIN_TEMPLATE = '\'{{pluginName}}\'';

const MAIN_TEMPLATE =
`/* Automatically generated by '/scripts/generate-plugin-route.js' */
/* eslint-disable */ 

{{importRoutes}}

{{importComponents}}

{{styleImportTemplate}}

export const routes = {
{{routesTemplate}}
};

export const components = {
{{componentsTemplate}}
};

export const injectPlugins = [{{injectPlugins}}];
`;

const importRoutesTemplate = [];
const pluginTemplate = [];
const routesTemplate = [];
const componentsTemplate = [];
const importComponentTemplate = [];
const styleImportTemplate = [];

function firstLetterUpperCase(string) {
  return string.slice(0, 1).toLocaleUpperCase() + string.slice(1, string.length);
}

function getImportSrc({
  moduleName,
  pluginName,
  hash,
  type,
  version
}) {
  return `@node_modules/@${moduleName}.do/${moduleName}/lib/plugins/${moduleName}-v${version}/${pluginName}/${type}/${pluginName}.${hash}.${type}`;
}

const injectThirdPlugins = [];

injectPlugins.forEach(pluginString => {
  const [moduleName, pluginName] = pluginString.split(".");

  if (!utils.isSelfModule(moduleName)) {
    const version = utils.readPluginVersion(moduleName);
    const hash = utils.readPluginHash(moduleName);

    const importJsonName = `${firstLetterUpperCase(moduleName)}${firstLetterUpperCase(pluginName)}Json`;
    const importComponentName = `${firstLetterUpperCase(moduleName)}${firstLetterUpperCase(pluginName)}Component`;

    pluginTemplate.push(moduleName);

    routesTemplate.push(render(ROUTE_TEMPLATE, {
      key: pluginString,
      value: `...${importJsonName}`,
    }));

    componentsTemplate.push(render(COMPONENT_TEMPLATE, {
      key: pluginString,
      value: `${importComponentName}`,
    }));

    importRoutesTemplate.push(render(IMPORT_ROUTES_TEMPLATE, {
      name: importJsonName,
      src: `@node_modules/@${moduleName}.do/${moduleName}/src/plugin/provide/${pluginName}`,
    }));

    importComponentTemplate.push(render(IMPORT_COMPONENT_TEMPLATE, {
      name: importComponentName,
      src: `@node_modules/@${moduleName}.do/${moduleName}/lib/plugins/${moduleName}-v${version}/${pluginName}/js/${pluginName}.${hash}.js`,
    }));

    injectThirdPlugins.push(render(PLUGIN_TEMPLATE, {
      pluginName: pluginString,
    }));

    const hasStyle = utils.pluginHasStyle(pluginString);
    if (hasStyle) {
      styleImportTemplate.push(render(STYLE_TEMPLATE, {
        src: getImportSrc({
          moduleName,
          pluginName,
          hash,
          version,
          type: "css",
        }),
      }));
    }
  }
});

const template = render(MAIN_TEMPLATE, {
  importRoutes: importRoutesTemplate.join(endOfLine),
  injectPlugins: injectThirdPlugins.join(", "),
  routesTemplate: routesTemplate.join(","+ endOfLine),
  componentsTemplate: componentsTemplate.join("," + endOfLine),
  importComponents: importComponentTemplate.join(endOfLine),
  styleImportTemplate: styleImportTemplate.join(endOfLine),
});

fs.writeFileSync(OUTPUT_PATH, template);

console.log('[build plugin-entry] DONE');
